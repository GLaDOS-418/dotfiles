f	input.h	/^inline void f(int x, int y) {}$/;"	f	typeref:typename:void	signature:(int x,int y)
x	input.h	/^inline void f(int x, int y) {}$/;"	z	function:f	typeref:typename:int	file:	nth:0
y	input.h	/^inline void f(int x, int y) {}$/;"	z	function:f	typeref:typename:int	file:	nth:1
X	input.h	/^#define F(X,Y) (X+Y)$/;"	D	macro:F	nth:0
Y	input.h	/^#define F(X,Y) (X+Y)$/;"	D	macro:F	nth:1
F	input.h	/^#define F(/;"	d	signature:(X,Y)
C	input.h	/^class C {};$/;"	c	template:<class T1,class T2,int I>
T1	input.h	/^template<class T1, class T2, int I>$/;"	Z	class:C	typeref:meta:class	nth:0
T2	input.h	/^template<class T1, class T2, int I>$/;"	Z	class:C	typeref:meta:class	nth:1
I	input.h	/^template<class T1, class T2, int I>$/;"	Z	class:C	typeref:typename:int	nth:2
D	input.h	/^class D {$/;"	c
i	input.h	/^	int i, j;$/;"	m	class:D	typeref:typename:int	nth:0
j	input.h	/^	int i, j;$/;"	m	class:D	typeref:typename:int	nth:1
c	input.h	/^	char c;$/;"	m	class:D	typeref:typename:char	nth:2
color	input.h	/^enum color {$/;"	g
red	input.h	/^	red, green, blue,$/;"	e	enum:color	nth:0
green	input.h	/^	red, green, blue,$/;"	e	enum:color	nth:1
blue	input.h	/^	red, green, blue,$/;"	e	enum:color	nth:2
