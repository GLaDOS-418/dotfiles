#!/bin/env bash
#########################################
##                           ___.      ##
## _____ _______  ____   ____\_ |__    ##
## \__  \\_  __ \/    \ /  _ \| __ \   ##
##  / __ \|  | \/   |  (  <_> ) \_\ \  ##
## (____  /__|  |___|  /\____/|___  /  ##
##      \/           \/           \/   ##
##                                     ##
#########################################

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# https://unix.stackexchange.com/a/113768
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  exec tmux
fi

################################################################
# LOCAL VARS
################################################################

DOTFILES=${HOME}/dotfiles
DOT_SETUP_FILE="${DOTFILES}/dot_setup.sh"

DOTBASE=${DOTFILES}/dotbase
DOTSCRIPTS=${DOTFILES}/dotscripts
DOTINSTALL=${DOTFILES}/dotinstall
DOTRC=${DOTFILES}/dotrc

VIM=${HOME}/vim
TOOL_SCRIPTS="$HOME/dotfiles/tools"
BOB_NVIM="$HOME/.local/share/bob/nvim-bin"
GOBIN="/usr/local/go/bin"
SNAP="/snap/bin/hugo"

# wsl update keeps changing the the version prefix
PERF="$(echo /usr/lib/linux-tools/*-generic)"

################################################################
# ENV VARS
################################################################

export SHELL=/bin/bash

#export https_proxy=""
export EDITOR=nvim
export VISUAL=nvim
export MYVIMRC="$HOME/.vimrc"
export XDG_CONFIG_HOME=${HOME}/.config
export INPUTRC="$HOME/.inputrc"
export COLUMNS

# The Firefox build system and related tools store shared, persistent state in a common directory on the filesystem
export UNICTAGS=$HOME/bin/ctags_bld

export CC=gcc
export CXX=g++

export GOPATH=${HOME}/go
export LOCALBIN=${HOME}/.local/bin
export LOCALNVIM=${HOME}/.local/nvim/bin

# required only if JAVA_HOME is not set by sdkman in the end of this script
# export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))

# DOTNET=$HOME/.dotnet

export PATH=$BOB_NVIM:$UNICTAGS/bin:$CHROME:$LIVE_LATEX_PREVIEW:$GNUGLOBAL:$GOPATH/bin:$TOOL_SCRIPTS:$LOCALBIN:$LOCALNVIM:$PATH
export PATH=${JAVA_HOME}/bin:${GOBIN}:${PERF}:${DOTNET}:$PATH
# export MANPATH=$MANPATH:$HOME/share/man


## INSTALL MANAUAL BINARIES IN ~/thirdparty/*
for d in $HOME/thirdparty/*/; do
    [ -d "$d" ] && PATH+=":$d"
done

#########################################
### BASH HISTORY
#########################################

# don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth:erasedups

# save last 20k commands on disk and of that load last 10k commands in memory.
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTFILE="$HOME/.bash_history"
export PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"

##############################################
#  THIRD PARTY
##############################################

# anime quotes on startup
# alternative to: https://github.com/rocktimsaikia/animechan
if [ "${WORK}" = "false" ]; then
  curl --max-time 3 --fail --silent "https://animechan.io/api/v1/quotes/random" |
    jq -r '"\n\t\(.data.content)\n\t\t- \(.data.character.name) (\(.data.anime.name))\n"' |
    fold --spaces --width=80 |
    awk '{pad = (60 > length) ? int((60 - length) / 2) : 0; printf "%*s%s\n", pad, "", $0}'
fi

# fuzzy search files using fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# use Fzf with 'fd'
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
#export FZF_DEFAULT_COMMAND="fd . $HOME"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -L -t d . $HOME"
# Preview file content using bat (https://github.com/sharkdp/bat)
export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

# CTRL-/ to toggle small preview window to see the full command
# CTRL-Y to copy the command into clipboard using pbcopy
export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:3:hidden:wrap
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"

# morhetz/gruvbox
export FZF_DEFAULT_OPTS='--color=bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934'

FZF_UTILITIES="$HOME/dotfiles/.fzf_utilities"
if [ -e "${FZF_UTILITIES}" ]; then
  source "${FZF_UTILITIES}"
fi

# git completion
git_completion=${DOTFILES}/tools/git-completion-bash.sh
if [ -e  "${git_completion}" ]; then
    source "${git_completion}"
fi

# rust env
. "$HOME/.cargo/env"

# https://github.com/nvbn/thefuck
# TODO: below option starts a new shell at $HOME. fucks up tmux pane_current_path settings.
# eval $(thefuck --alias --enable-experimental-instant-mode)

# https://github.com/ajeetdsouza/zoxide
eval "$(zoxide init bash)"

################################################################
# SOURCES
################################################################

# Remove all predefined aliases
unalias -a

# You may want to put all your additions into a separate file like
# $DOTRC/bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

for f in ${DOTRC}/*; do [ -f "$f" ] && source "$f"; done

################################################################
##  CONFIG
################################################################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

# running gui apps as root
xhost +local:root > /dev/null 2>&1
# sudo with tab completion
complete -cf sudo

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.
shopt -s checkwinsize

# the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# Prevent file overwrite on stdout redirection.
# Use `>|` to force redirection to an existing file.
set -o noclobber

# cdspell                 - correct minor spelling mistakes in cd
# checkjobs               - check if a job is running in current bash session. If yes, ask for second exit
# dirspell                - bash attempting spell correction if dir does not exit
# histappend              - Enable history appending instead of overwriting.
# autocd                  - a dir name is executed as if it is an arg to cd cmd
# direxpand               - automatically expand directory globs when completing
# histverify              - expand, but don't automatically execute, history expansions
# nocaseglob              - case insensitive globbing
# no_empty_cmd_completion - don't TAB expand empty lines
# cmdhist                 - save multiline commands as single line in history

shopt -s expand_aliases cdspell checkjobs dirspell histappend \
autocd direxpand histverify nocaseglob no_empty_cmd_completion cmdhist

###################################################################
# COLORS
###################################################################

# NOTE: example usage
# Example usage:
# echo -e "${BOLD}${RED}This is bold red text${RESET}"
# echo -e "${ITALIC}${GREEN}This is italic green text${RESET}"
# echo -e "${UNDERLINE}${BLUE}This is underlined blue text${RESET}"
# echo -e "${BLINK}${MAGENTA}This is blinking magenta text${RESET}"
# echo -e "${REVERSE}${CYAN}This is reverse video cyan text${RESET}"
# echo -e "${BGBLACK}${WHITE}This is white text on black background${RESET}"
# echo -e "${BGYELLOW}${BRED}This is bright red text on yellow background${RESET}"
# echo -e "${DIM}${YELLOW}This is dim yellow text${RESET}"
# echo -e "${HIDDEN}${WHITE}This is hidden white text${RESET}"
# echo -e "${STRIKETHROUGH}${BLUE}This is strikethrough blue text${RESET}"s
#
## colors? used for the prompt.

esc_color(){
  printf "\["${1}"\]"
}

# Function to define regular, bright, and background colors
define_color() {
  local color_name=$1
  local color_code=$2
  eval "$color_name='\e[0;${color_code}m'"
  eval "B$color_name='\e[1;${color_code}m'"
  eval "BG$color_name='\e[4${color_code:1}m'"
}

# Function to define text styles
define_style() {
  local style_name=$1
  local style_code=$2
  eval "$style_name='\e[${style_code}m'"
}

# Reset color
RESET='\e[m'

# Define text styles
define_style BOLD 1
define_style DIM 2
define_style ITALIC 3
define_style UNDERLINE 4
define_style BLINK 5
define_style REVERSE 7
define_style HIDDEN 8
define_style STRIKETHROUGH 9
define_style BOLDOFF 21
define_style ITALICOFF 23
define_style UNDERLINEOFF 24
define_style BLINKOFF 25
define_style REVERSEOFF 27
define_style STRIKETHROUGHOFF 29

# Define colors
define_color BLACK 30
define_color RED 31
define_color GREEN 32
define_color YELLOW 33
define_color BLUE 34
define_color MAGENTA 35
define_color CYAN 36
define_color WHITE 37

# Define colors for dark mode
DARK_SLATE_GRAY_FG='\e[38;2;47;79;79m'
DARK_SLATE_GRAY_BG='\e[48;2;47;79;79m'

OLIVE_GREEN_FG='\e[38;2;128;128;0m'
OLIVE_GREEN_BG='\e[48;2;128;128;0m'

DARK_OLIVE_GREEN_FG='\e[38;2;85;107;47m'
DARK_OLIVE_GREEN_BG='\e[48;2;85;107;47m'

SIENNA_FG='\e[38;2;160;82;45m'
SIENNA_BG='\e[48;2;160;82;45m'

TEAL_FG='\e[38;2;0;128;128m'
TEAL_BG='\e[48;2;0;128;128m'

DARK_GOLDENROD_FG='\e[38;2;184;134;11m'
DARK_GOLDENROD_BG='\e[48;2;184;134;11m'

SLATE_BLUE_FG='\e[38;2;106;90;205m'
SLATE_BLUE_BG='\e[48;2;106;90;205m'

DARK_CYAN_FG='\e[38;2;0;139;139m'
DARK_CYAN_BG='\e[48;2;0;139;139m'

DARK_ORANGE_FG='\e[38;2;255;140;0m'
DARK_ORANGE_BG='\e[48;2;255;140;0m'

DARK_MAGENTA_FG='\e[38;2;139;0;139m'
DARK_MAGENTA_BG='\e[48;2;139;0;139m'

LIGHT_GRAY_FG='\e[38;2;211;211;211m'
LIGHT_GRAY_BG='\e[48;2;211;211;211m'


# Change the window title of X terminal
# TODO: is it even required anymore?
# case ${TERM} in
#   xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
#     PROMPT_COMMAND+='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
#     ;;
#   screen*)
#     PROMPT_COMMAND+='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
#     ;;
# esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f $HOME/.dir_colors   ]] && match_lhs="${match_lhs}$(<$HOME/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
  && type -P dircolors >/dev/null \
  && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

function __build_prompt_command {
  local pstatus=$(nonzero_error_code) # cache, otherwise the error code will change to the output of next executed command
  local pbranch=$(parse_git_branch)
  local cwd=${PWD/#$HOME/\~}          # Ensure to trim the home directory to ~
  local username="${USER}"            # Gets the username
  local hostname="${HOSTNAME}"        # Gets the hostname

  # username and hostname already in tmux bar
  # cmd input is on new line in case the screen width is not enough for dirname len
  printf "${YELLOW}[ ${BOLD}${BLACK}${BGBLUE}${cwd}${RESET} ${BCYAN}${pbranch} ${BRED}${pstatus}${BGREEN}${SHLVL} ${YELLOW}]${RESET}\n$ "
}

if ${use_color} ; then
  # Enable colors for ls, etc.  Prefer $HOME/.dir_colors #64489
  if type -P dircolors >/dev/null ; then
    if [[ -f $HOME/.dir_colors ]] ; then
      eval $(dircolors -b $HOME/.dir_colors)
    elif [[ -f /etc/DIR_COLORS ]] ; then
      eval $(dircolors -b /etc/DIR_COLORS)
    fi
  fi

  if [[ ${EUID} == 0 ]] ; then
    PS1='$(esc_color ${BRED})\h \w\[\033[01;31m\]]\$\[\033[00m\] '
  else
    #TODO: sudo command and shell user either prompt or terminal change?
    PS1='$(__build_prompt_command)'
  fi

else
  if [[ ${EUID} == 0 ]] ; then
    # show root@ when we don't have colors
    PS1='\u@\h \w \$ '
  else
    PS1='\u@\h \w \$ '
  fi
fi

# better yaourt colors
export YAOURT_COLORS="nb=1:pkg=1:ver=1;32:lver=1;45:installed=1;42:grp=1;34:od=1;41;5:votes=1;44:dsc=0:other=1;35"

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# get rid of annoying dark blue color on black bg on terminal
# $ dircolors, dircolors -p #use these commands to know about the colors
LS_COLORS=$LS_COLORS:'di=01;33:ow=01;37;45:so=01;37;45'
export LS_COLORS

# colors used for colorful man-pages
export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
export LESS_TERMCAP_md=$(tput bold; tput setaf 6) # cyan
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # yellow on blue
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
export LESS_TERMCAP_ZN=$(tput ssubm)
export LESS_TERMCAP_ZV=$(tput rsubm)
export LESS_TERMCAP_ZO=$(tput ssupm)
export LESS_TERMCAP_ZW=$(tput rsupm)
export GROFF_NO_SGR=1         # For Konsole and Gnome-terminal

unset use_color safe_term match_lhs sh

#################################
# THIRD PARTY
#################################

# reporting tools - install when not installed
# neofetch
#screenfetch
#alsi
#paleofetch
#fetch
#hfetch
#sfetch
#ufetch
#ufetch-arco
#pfetch
#sysinfo
#sysinfo-retro
#cpufetch
#colorscript random

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


###############################################################################
# Load this after everything else has been loaded.
###############################################################################
if [ -e "$HOME"/.personalrc ]; then
  source "$HOME"/.personalrc
fi
