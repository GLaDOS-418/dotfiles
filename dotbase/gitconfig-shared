# name, email and autocrlf should be project specific

[core]
	filemode = false
	editor = nvim
	#pager = diff-so-fancy | less --tabs=4 -RFX
	pager = delta
        #whitespace = trailing-space,space-before-tab
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections

    # delta detects terminal colors automatically; set one of these to disable auto-detection
    # dark = true
    # light = true
[alias]
    try="clone --depth 1"
    co=checkout
    edit=config --global -e # edit git global config
    pr=!git pull --rebase --prune
    cob=checkout -b
    squash="!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    lo="log --oneline --no-merges -n 20 --pretty=format:'%Cred%h%Creset - %C(cyan)%an%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
    abh="log --oneline --no-merges --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit  --author='abhanja' --date=relative"
    patch = !git --no-pager diff --no-color
    pick="!g(){ git cherry-pick ${1} -n; };g"
    cp="!g(){ git cherry-pick ${1} ; };g"
    dsf="!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
    hide="update-index --assume-unchanged"
    unhide="update-index --no-assume-unchanged"
    graph="log --graph --pretty=format:'%Cred%h%Creset - %C(cyan)%an%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
    can="commit --amend --no-edit"
    caan="commit -a --amend --no-edit"

    # delete all merged branches
    bclean="!f() { git branch --merged ${1} | grep -v  ${1} | egrep -o --color=never '[a-zA-Z0-9.-]{5,}' | xargs git branch -d; };f"

    # git add only non-whitespace changes
    addnw=!sh -c 'git diff -U0 -w --no-color "$@" | git apply --cached --ignore-whitespace --unidiff-zero -'
    gui = !gitk &
    slist = stash list --format='%gd (%cr): %gs'
    sdiff = stash show -p
    autopull = !git stash && git pull && git stash apply
    mt=mergetool
    mtg=mergetool --gui
    pt =  !git pull origin $(git rev-parse --abbrev-ref HEAD)
    unfuck = !git fsck && git remote prune origin && git gc # better than just "garbage collection(gc)"

    # print all branches that have diverged from remote
    diverged = "!for b in $(git for-each-ref --format='%(refname:short)' refs/heads/); do git rev-list --left-right --count origin/$b...$b &>/dev/null && git rev-list --left-right --count origin/$b...$b | awk '{if ($1 > 0 || $2 > 0) print b}' b=\"$b\"; done"

    # see a specific version of a file
    fileat="!g(){ git show ${1}:${GIT_PREFIX:-./}${2} ; };g" # {2} is filepath (relative), {1} is revision/commit/branch etc.
[system "core"]
   longpaths = true

[diff]
	tool = nvimdiff
	renameLimit = 1000
	guitool = kdiff3

[merge]
    tool = nvimdiff
    guitool = kdiff3

[mergetool]
	prompt = true

[mergetool "nvimdiff"]
    # https://git-scm.com/docs/vimdiff/2.39.3
    layout = LOCAL,BASE,REMOTE/MERGED + LOCAL,MERGED,REMOTE
    keepBackup = false
    trustExitCode = false

[mergetool "kdiff3"]
    path = "/mnt/c/Program Files/KDiff3/kdiff3.exe"
    keepBackup = false
    trustExitCode = false

[apply]
        #whitespace = fix
#
[color]
	ui = auto
        status = true
        advice = true
        branch = true
        diff = true
        grep = true
        interactive = true
        pager = true
        push = true
        remote = true
        showBranch = true
        transport = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

[diff-so-fancy]
	stripLeadingSymbols = false
	changeHunkIndicators = false
	markEmptyLines = false
	useUnicodeRuler = false
	rulerWidth = 47
	first-run = false
[gui]
	encoding = utf-8

[rebase]
        stat = true
        autoStash = true
        updateRefs = true
        missingCommitsCheck = error
        #instructionFormat = %s ⦿ %an (%cr)  %d # this fucks up update-refs by adding update-ref for HEAD
[init]
	defaultBranch = main

[branch]
	autosetuprebase = always
[clean]
	requireForce = true
[help]
	autocorrect = prompt
[push]
	autoSetupRemote = true
	default = current
