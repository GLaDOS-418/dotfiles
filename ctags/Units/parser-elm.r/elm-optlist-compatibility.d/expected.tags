Main	input.elm	/^port module Main exposing (..)$/;"	m	roles:def
List	input.elm	/^import List$/;"	m	roles:imported
Maybe	input.elm	/^import Maybe exposing (withDefault)$/;"	m	roles:imported
withDefault	input.elm	/^import Maybe exposing (withDefault)$/;"	f	module:Maybe	roles:exposed
Je	input.elm	/^import Json.Encode as Je$/;"	n	module:Main	roles:def	moduleName:Json.Encode
Json.Encode	input.elm	/^import Json.Encode as Je$/;"	m	roles:imported
Thing	input.elm	/^type Thing$/;"	t	module:Main	roles:def
One	input.elm	/^    = One$/;"	c	type:Main.Thing	roles:def
Two	input.elm	/^    | Two Int$/;"	c	type:Main.Thing	roles:def
Param	input.elm	/^type Param a$/;"	t	module:Main	roles:def
Cons	input.elm	/^    = Cons a$/;"	c	type:Main.Param	roles:def
Other	input.elm	/^    | Other a$/;"	c	type:Main.Param	roles:def
Num	input.elm	/^type alias Num =$/;"	a	module:Main	roles:def
outward	input.elm	/^port outward : String -> Cmd a$/;"	p	module:Main	roles:def
inward	input.elm	/^port inward : (b -> a) -> Sub a$/;"	p	module:Main	roles:def
foo	input.elm	/^foo a =$/;"	f	module:Main	roles:def
bar	input.elm	/^bar =$/;"	f	module:Main	roles:def
bas	input.elm	/^        bas =$/;"	f	function:Main.bar	roles:def
