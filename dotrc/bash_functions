#!/bin/env bash

################################################################
# CODE MANAGEMENT
################################################################

# C++

function new_cpp_project {
  if [ ! "${1}" ]
  then
    echo "project name not supplied..."
    return
  fi

  git clone --depth 1 --single-branch --branch main git@github.com:GLaDOS-418/cpp-project-template.git "${1}"
  cd "${1}" || exit
  /usr/bin/rm -rf .git
  echo "# ${1}" >| README.md
  grep -rl --color=never 'project-name' | xargs sed -i "s/project-name/${1}/g"
  git init
  git add -f .
  git commit -m "created project ${1}."

  echo " ========================   PROJECT ${1} SETUP COMPLETE.  ======================== "
}

function gpp {
  g++ \
    -Ddebug \
    -O3 \
    -Wall \
    -Wcast-align \
    -Wcast-qual \
    -Wconversion \
    -Wdisabled-optimization \
    -Weffc++ \
    -Wextra \
    -Wfloat-equal \
    -Wformat-security  \
    -Wformat-y2k \
    -Wformat=2 \
    -Wimport \
    -Winit-self \
    -Winline \
    -Winvalid-pch   \
    -Wlong-long \
    -Wmissing-braces \
    -Wmissing-field-initializers \
    -Wmissing-format-attribute   \
    -Wmissing-include-dirs \
    -Wmissing-noreturn \
    -Wpacked  \
    -Wparentheses \
    -Wpointer-arith \
    -Wredundant-decls \
    -Wshadow \
    -Wstack-protector \
    -Wstrict-aliasing=2 \
    -Wswitch-default \
    -Wswitch-enum \
    -Wuninitialized \
    -Wunreachable-code \
    -Wunused \
    -Wunused-parameter \
    -Wunused-value \
    -Wunused-variable \
    -Wvariadic-macros \
    -Wwrite-strings \
    -fsanitize=pointer-compare -fsanitize=pointer-subtract \
    -fsanitize=undefined -fsanitize=address \
    -pedantic  \
    -pedantic-errors \
    -pthread -latomic -mavx2 \
    -std=c++2b \
    -g3 \
    "$@"
    # -fno-omit-frame-pointer \  # https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#C
    # -Waggregate-return \  # https://stackoverflow.com/questions/14016993/confusion-in-regards-to-purpose-behavior-of-waggregate-return
}

function gpd {
  gpp -g "$@"
}

function gpe {
  gpd -Werror "$@"
}

export -f gpp
export -f gpd
export -f gpe


function install_clang {
  sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
}

function split_video {
 if [ $# -ne 1 ]; then
        echo "Usage: split_video <input_video>"
        echo "Example: split_video video.mp4"
        return 1
    fi

    input_file="$1"
    file_extension="${input_file##*.}"
    base_name="${input_file%.*}"

    if [ ! -f "${input_file}" ]; then
        echo "Input file '$input_file' not found."
        return 1
    fi

  mkdir -p split
  ffmpeg -i "${input_file}" -reset_timestamps 1 -c copy -map 0 -segment_time 00:14:30 -f segment ./split/"${base_name}"_%03d."${file_extension}"
}


function snip {
  # $ snip cpp
  cp "${HOME}"/code/friendly-snippets/snippets/"${1}"/"${1}".json "${HOME}"/.vim/plugged/friendly-snippets/snippets/"${1}"/"${1}".json
}

function cpp_flags {
  echo '-std=c++23' >| compile_flags.txt
}

# Rust
#
function update_rust {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}

# Linux
#
function rman {
  # open a random man page from one of the sections listed in 'sections' array
  # 1 : user commands
  # 2 : system calls
  # 3 : library functions
  # 4 : device files
  # 5 : file formats
  # 6 : games and demos
  # 7 : miscellaneous
  # 8 : sys admin
  # 9 : kernel developer's manual

  # random_section=$(shuf -i 1-9 -n 1) # generate a random number in [1-9]
  local sections=("1")
  local random_section=${sections[$RANDOM % ${#sections[@]}]}

  find "/usr/share/man/man$random_section/" -type f -prune -o -print | shuf -n 1 | sed 's/.gz$//g' | sed 's#.*/##' |  xargs man
}

#########################################
# UTILITIES
#########################################


# ssh key generation

function generate_new_key {
  ssh-keygen -t ed25519 -C $(whoami)@$(echo $(uname -nmo; grep -P ^NAME /etc/os-release | sed -E -e 's/NAME="(.*)"/\1/g' | tr ' ' '_' ; date +%F) | tr ' ' '::')
}

# fzf
function fzfupdate {
    mkdir -p "${HOME}"/.fzf
    cd "${HOME}"/.fzf && git pull && ./install
}

function ftstats {
    # recursive statistics on file types in directory
    # files that do not have any extensions(.foo) are treated as extensions themselves
    # hidden files and folders are excluded

    dir="${1:-.}"

    if [ ! -d "$dir" ]; then
        echo "directory '$dir' does not exist."
        return
    fi

    find "$dir" -type f -not -path '*/\.*' | sed -E 's/.*\././' | sort -r | uniq -c
}

function mcd {
    mkdir -pv "$1" && cd "$1" || exit
}

function ls {
    command ls -FhvC --color=always --author --time-style=long-iso "$@" | /usr/bin/less -RXF
}

function setup {
  fc -ln "$1" "$1" | sed '1s/^[[:space:]]*//' | xargs echo >> "$DOT_SETUP_FILE"
}

function lmedia {
  find "$1" -maxdepth 2 -mindepth 2 -type d  | sed -e 's/^.*\///g' | sort -bdfh > "$2"
}

function mp {
  touch "$1".cpp && touch "$1".in && vim -O "$1".cpp "$1".in
}

function op {
  # open multiple files matching the glob in vim
    if [[ -z $1 ]]; then
        echo "no glob..."
    elif [[ "$(ls -l "$1"* | wc -l)" -gt 2 ]]; then
        echo "too many matches..."
    else
        vim -O "$(ls "$1"*)"
    fi
}

function bench {
  time "$@" 1>/dev/null 2>&1
}


function grl {
  grep -Rl --exclude-dir={docs,deploy,.git} --include=\*.{ts,cs,cpp,CPP,cc,h,H,hpp,xslt,xml,makefile,mk,yml,log\*,ksh,sh,bat,vcsxproj,inc,pck,sql,lua,rs,go,ts,js} "$@" 2>/dev/null
}

function grn {
  grep -Rn --exclude-dir={docs,deploy,.git} --include=\*.{ts,cs,cpp,CPP,cc,h,H,hpp,xslt,xml,makefile,mk,yml,log\*,ksh,sh,bat,vcxproj,inc,pck,sql,lua,rs,go,ts,js} "$@" 2>/dev/null
}

# ex - archive extractor
function ex {
  [[ -z "$1" ]] && { 
    echo "Usage: ex <file>"
    return 1 
  }

  if [[ ! -f "$1" ]]; then
    echo "'$1' is not a valid file"
    return 1
  fi

  file_path=$(realpath "$1")
  archive_name=$(basename "$file_path")
  extract_dir="${archive_name}.extracted"

  mkdir -p "$extract_dir"
  cd "$extract_dir" || { echo "Failed to change directory to $extract_dir"; return 1; }

  case $file_path in
    *.tar.bz|*.tbz|*.tar.bz2|*.tbz2|*.tb2) tar -xjf "$file_path" ;;
    *.tar.gz|*.tgz)                        tar -xzf "$file_path" ;;
    *.tar.xz|*.txz)                        tar -xJf "$file_path" ;;
    *.pkg.tar.zst)                         bsdtar -xvf "$file_path" ;;
    *.tar.zst)                             tar --zstd -xvf "$file_path" ;;
    *.tar.lz)                              tar --lzip -xvf "$file_path" ;;
    *.tar.lzma)                            tar --lzma -xvf "$file_path" ;;
    *.tar.lzo)                             tar --lzop -xvf "$file_path" ;;
    *.7z)                                  7z x "$file_path" ;;
    *.bz2)                                 bunzip2 -k "$file_path" ;;
    *.gz)                                  gunzip -k "$file_path" ;;
    *.deb)                                 ar x "$file_path" ;;
    *.rpm)                                 rpm2cpio "$file_path" | cpio -idmv ;;
    *.flatpak)                             flatpak build-extract "$file_path" ;;
    *.snap)                                unsquashfs "$file_path" ;;
    *.rar)                                 unrar x "$file_path" ;;
    *.tar)                                 tar -xvf "$file_path" ;;
    *.Z)                                   uncompress "$file_path" ;;
    *.vsix|*.zip)                          unzip -o "$file_path" ;;
    *)                                     echo "'$1' cannot be extracted via ex()" ;;
  esac

  cd - > /dev/null || return
}

# ar - archiver
function ar {
  while getopts "f:t:" opt; do
    case $opt in
      f) file=$OPTARG ;;
      t) type=$OPTARG ;;
      *) echo "Invalid option"; return 1 ;;
    esac
  done
  [[ -z $file || -z $type ]] && { 
    echo "Usage: ar -f <file> -t <type>"
    echo "Supported types: 7z, bz2, gz, pkg.tar.zst, rar, tar.bz, tbz, tbz2, tar.bz2, tb2, tgz,"
    echo "                 tar.gz, txz, tar.xz, tar.zst, tar.lz, tar.lzma, tar.lzo, tar, Z, zip"
    return 1 
  }

  case $type in
    tbz|tar.bz|tbz2|tar.bz2|tb2) tar -cvjf "$file.tar.bz2" "$file" ;;
    tgz|tar.gz) tar -cvzf "$file.tar.gz" "$file" ;;
    txz|tar.xz) tar -cvJf "$file.tar.xz" "$file" ;;
    tar.zst) tar --zstd -cvf "$file.tar.zst" "$file" ;;
    tar.lz) tar --lzip -cvf "$file.tar.lz" "$file" ;;
    tar.lzma) tar --lzma -cvf "$file.tar.lzma" "$file" ;;
    tar.lzo) tar --lzop -cvf "$file.tar.lzo" "$file" ;;
    7z) 7z a "$file.7z" "$file" ;;
    bz2) bzip2 -k -v "$file" ;;
    gz) gzip -k -v "$file" ;;
    pkg.tar.zst) bsdtar -cvf "$file.pkg.tar.zst" "$file" ;;
    rar) rar a "$file.rar" "$file" ;;
    tar) tar -cvf "$file.tar" "$file" ;;
    Z) compress -v "$file" ;;
    zip) zip -r -v "$file.zip" "$file" ;;
    deb) echo "Creating .deb archives is complex; use dpkg-deb" ;;
    rpm) echo "Creating .rpm archives is complex; use rpmbuild" ;;
    flatpak) echo "Creating .flatpak archives is complex; use flatpak-builder" ;;
    snap) echo "Creating .snap archives is complex; use snapcraft" ;;
    *) echo "Unsupported archive type"; return 1 ;;
  esac
}

# peek an archive without extracting
function peek {
  file="$1"
  [[ -z $file ]] && { 
    echo "Usage: peek <file>"
    return 1 
  }

  if [[ ! -f "$file" ]]; then
    echo "File '$file' not found"
    return 1
  fi

  case $file in
    *.tar.bz|*.tbz|*.tar.bz2|*.tbz2|*.tb2) tar -tvjf "$file" ;;
    *.tar.gz|*.tgz) tar -tvzf "$file" ;;
    *.tar.xz|*.txz) tar -tvJf "$file" ;;
    *.pkg.tar.zst) bsdtar -tvf "$file" ;;
    *.tar.zst) tar --zstd -tvf "$file" ;;
    *.tar.lz) tar --lzip -tvf "$file" ;;
    *.tar.lzma) tar --lzma -tvf "$file" ;;
    *.tar.lzo) tar --lzop -tvf "$file" ;;
    *.7z) 7z l "$file" ;;
    *.bz2) bzip2 -l "$file" ;;
    *.gz) gzip -l "$file" ;;
    *.deb) dpkg-deb --contents "$file" ;;
    *.rpm) rpm -qlp "$file" ;;
    *.flatpak) flatpak info "$file" ;;
    *.snap) unsquashfs -l "$file" ;;
    *.rar) unrar l "$file" ;;
    *.tar) tar -tvf "$file" ;;
    *.Z) uncompress -c -l "$file" ;;
    *.zip) unzip -l "$file" ;;
    *) echo "Unsupported file type"; return 1 ;;
  esac
}

# WSL 'git' wrapper. Named the function git to get bash completion
# https://github.com/Microsoft/WSL/issues/981#issuecomment-363638656
function git {
  REALPATH=$(readlink -f "${PWD}")
  if grep --color=never -qE "(MINGW64|CYGWIN)" /proc/version &> /dev/null  && [ "${REALPATH:0:6}" == "/cygdrive/" ] || [ "${REALPATH:0:3}" == "/c/" ]; then
    # /c/ for git bash and /cygdrive/ for cygwin
    git.exe "$@"
  elif grep --color=never -qE "(Microsoft|WSL)" /proc/version &> /dev/null  && [ "${REALPATH:0:5}" == "/mnt/" ]; then
    # /mnt/ for microsoft wsl. WSL doesn't allow windows programs to alter subsystem files. Thus no /home/
    git.exe "$@"
  elif grep --color=never -qE "(MSYS_NT)" /proc/version &> /dev/null ;  then
    /mingw64/bin/git "$@"
  else
    /usr/bin/git "$@"
  fi
}

# Interactively fuzzy-find and checkout a local Git branch.
# Lists only local branches, sorted by last commit date (most recent first).
# Displays a 1-line preview of the latest commit for each branch (excluding merges).
# Automatically updates the preview as you move the selection.
# Uses a small floating window (40% height), preserving most of the terminal.
# Checks out the selected branch.
#
# Dependencies:
# - fzf        (https://github.com/junegunn/fzf)
function gco {
  git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ | \
    fzf --height=40% --reverse --inline-info --no-multi --ansi \
        --preview="git log -n 1 --no-merges --color=always --graph --oneline {}" \
        --preview-window=up:1:wrap | \
    xargs git checkout
}

function git_ignore {
  # Usage : generates .gitignore file for languages, IDEs and Operating Systems
  # $ git_ignore vim c++ linux
  # End of https://www.gitignore.io/api/vim,c++,linux
  curl -Ls  "http://www.gitignore.io/api/$(IFS=, ; echo "$*")";
  printf '\n'
}

# aliases also have this
# function dh {
#     BRANCH='HEAD'
#     if [ -n $1 ]; then
#         BRANCH=$1
#     fi
#     echo $BRANCH
#     git diff --ignore-space-at-eol --ignore-all-space --ignore-space-change --ignore-blank-lines $BRANCH
# }
#
# function diffhead {
#     BRANCH='HEAD'
#     if [ ! -n $1 ]; then
#         BRANCH=$1
#     fi
#     git diff --ignore-cr-at-eol --ignore-space-at-eol --ignore-all-space --ignore-space-change --ignore-blank-lines $BRANCH
# }

function colors {
  local fgc bgc vals seq0

  printf "Color escapes are %s\n" '\e[${value};...;${value}m'
  printf "Values 30..37 are \e[33mforeground colors\e[m\n"
  printf "Values 40..47 are \e[43mbackground colors\e[m\n"
  printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

  # foreground colors
  for fgc in {30..37}; do
    # background colors
    for bgc in {40..47}; do
      fgc=${fgc#37} # white
      bgc=${bgc#40} # black

      vals="${fgc:+$fgc;}${bgc}"
      vals=${vals%%;}

      seq0="${vals:+\e[${vals}m}"
      printf "  %-9s" "${seq0:-(default)}"
      printf '%s' " ${seq0}TEXT\e[m"
      printf '%s' " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
    done
    echo; echo
  done
}

function nonzero_error_code {
  printf '%s' "$(local e=$? ; if [ $e -ne 0 ]; then echo ${e}: ; else echo '' ; fi)"
}

# get current branch in git repo
function parse_git_branch {
  BRANCH=$(git rev-parse --abbrev-ref HEAD 2> /dev/null | sed -e 's/\(.*\)/\1/')
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=$(parse_git_dirty)
    printf '(%s)' "${BRANCH}${STAT}"
  fi

  printf ""
}

# get current status of git repo
function parse_git_dirty {
  status=$(git status 2>&1 | tee)

  dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
  untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
  ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
  behind=$(echo -n "${status}" 2> /dev/null | grep "Your branch is behind" &> /dev/null; echo "$?")
  newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
  renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
  deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
  diverged=$(echo -n "${status}" 2> /dev/null | grep "Your branch and.\+\?have diverged" &> /dev/null; echo "$?")

  bits=""
  if [ "${renamed}" == "0" ]; then
    bits="*${bits}"
  fi
  if [ "${ahead}" == "0" ]; then
    bits=">${bits}"
  fi
  if [ "${behind}" == "0" ]; then
    bits="<${bits}"
  fi
  if [ "${newfile}" == "0" ]; then
    bits="+${bits}"
  fi
  if [ "${untracked}" == "0" ]; then
    bits="?${bits}"
  fi
  if [ "${deleted}" == "0" ]; then
    bits="x${bits}"
  fi
  if [ "${dirty}" == "0" ]; then
    bits="!${bits}"
  fi
  if [ "${diverged}" == "0" ]; then
    bits="Y${bits}"
  fi
  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo ""
  fi
}

function update_calibre {
  sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
}


function nerd_font_install {
  # Example usage:
  # nerd_font_install "FiraCode" "Hack"
  # nerd_font_install "default"
  

  local fonts_dir="$HOME/.local/share/fonts"
  local default_fonts=("SourceCodePro" "IBMPlexMono" "FiraCode" "CascadiaCode" "IntelOneMono")
  local fonts=()

  if [ $# -eq 0 ]; then
    echo "Error: no font names provided."
    echo "Supported fonts: ${default_fonts[*]}"
    echo "Example:"
    echo '> nerd_font_install "FiraCode" "IntelOneMono" "Hack"'
    echo '> nerd_font_install "default"'
    return 1
  fi

  for font_name in "$@"; do
    if [ "${font_name}" == "default" ]; then
      fonts+=("${default_fonts[@]}")
    else
      fonts+=("${font_name}")
    fi
  done

  for font in "${fonts[@]}"; do
    local font_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${font}.zip"
    local font_zip="${font}.zip"

    echo "Downloading ${font}..."
    if wget -q -O "${font_zip}" "${font_url}"; then
      mkdir -p "${fonts_dir}"
      echo "Installing ${font}..."
      unzip -q -o "${font_zip}" -d "${fonts_dir}"
      rm "${font_zip}"
      echo "Completed installation of ${font}."
    else
      echo "Error: Failed to download Nerd Font: ${font}"
    fi
  done

  # Update user's font cache (no elevated permissions needed)
  fc-cache -fv "${fonts_dir}"
}

rcopen() {
  [ -z "${1}" ] && ls -l "${DOTRC}" && return 0;
  nvim "$DOTRC"/"$1"
}

rclang() {
  [ -z "$1" ] && ls -l "${DOTRC}"/languages && return 0
  nvim "${DOTRC}"/languages/"${1}"
}

#########################################
# PACKAGE MANAGERS
#########################################

function spac {
    
    if sudo -i pacman -Sy "$@"; then
        echo "$@" | tr ' ' '\n' >> "$DOTFILES"/paclist
    fi
}

function syay {
    
    if yay -Sy "$@" ; then
        echo "$@" | tr ' ' '\n' >> "$DOTFILES"/yaylist
    fi
}

function spip {
    
    if pip3 install "$@"; then
        echo "$@" | tr ' ' '\n' >> "$DOTFILES"/piplist
    fi
}

function ssnap {
    if sudo -i snap install "$@" ; then
        echo "$@" | tr ' ' '\n' >> "$DOTFILES"/snaplist
    fi
}

plantuml_server() {
  docker run --name plantuml-server -d -p 6969:8080 plantuml/plantuml-server:tomcat
}
